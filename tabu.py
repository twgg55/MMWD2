from typing import List, Dict, Tuple
import random
import statistics
from copy import deepcopy
import MatrixSegregation
import ShowSolutions

#inf = float('nan')
inf = -1

# lokacja 0 to baza
bin_locations = [[inf, 3,   6,   8,  10,  15,  20, 21],
                 [3,   inf, 4,   7,   9,  11,  16, 17],
                 [6,   4, inf,   2,   5,   9,  10, 11],
                 [8,   7,   2, inf,   1,   5,   8,  9],
                 [10,  9,   5,   1, inf,   7,   6,  7],
                 [15,  11,  9,   5,   7, inf,   4,  5],
                 [20,  16, 10,   8,   6,   4, inf,  5],
                 [21,  17, 11,   9,   7,   5,   5, inf]
                 ]

from random import seed, randint

seed(1)
min_rubbish = 1
max_rubbish = 10

liczba_lokacji = 2500
liczba_smieciarek = 25

bin_locations, bin_point_list, ilosc_punktow_na_strefe = MatrixSegregation.make_cost_matrix(liczba_lokacji, liczba_smieciarek, function_id=2)  # 7 punktow, 3 smieciarki

"""# Pokaz kolejnosc
x = [elem[0] for elem in bin_point_list]
y = [elem[1] for elem in bin_point_list]
from matplotlib import pyplot as plt
plt.plot(x, y)
plt.show()"""

rubbish_in_location = [0] + [randint(min_rubbish, max_rubbish) for i in range(liczba_lokacji-1)]
print("Ilosc smieci w lokalizacjach: ", rubbish_in_location)
trucks_volume = [1000] * liczba_smieciarek
print("Pojemnosc smieciarek: ", trucks_volume)
print("dane poczatkowe") # dane do test√≥w
#print( bin_locations, "\n",bin_point_list)
""""
bin_locations = [[-1, 31, 57, 94, 86, 76, 74, 91, 101, 128],
[31, -1, 73, 87, 74, 108, 104, 104, 116, 158],
[57, 73, -1, 63, 66, 68, 99, 142, 150, 100],
[94, 87, 63, -1, 17, 132, 158, 185, 196, 158],
[86, 74, 66, 17, -1, 133, 154, 175, 186, 164],
[76, 108, 68, 132, 133, -1, 48, 115, 119, 55],
[74, 104, 99, 158, 154, 48, -1, 70, 71, 97],
[91, 104, 142, 185, 175, 115, 70, -1, 12, 167],
[101, 116, 150, 196, 186, 119, 71, 12, -1, 169],
[128, 158, 100, 158, 164, 55, 97, 167, 169, -1]]

bin_point_list = [(0, 0), (-30, 11), (-2, -57), (-64, -70), (-68, -53), (65, -41), (74, 7), (53, 74), (65, 78), (93, -89)]
#bin_locations = [[-1, 16.1245154965971, 38.01315561749642, 68.0294054067798, 92.31467922275417, 111.04053313993049, 87.36131867136622, 72.42237223399962, 116.60617479361889, 99.12618221237011], [16.1245154965971, -1, 26.1725046566048, 62.0966987850401, 96.42613753542138, 126.15070352558483, 99.53893710503444, 67.26812023536856, 115.88356225108029, 85.05292469985967], [38.01315561749642, 26.1725046566048, -1, 38.948684188300895, 84.52810183601665, 148.44864431849825, 124.91997438360288, 86.83317338436964, 138.15932831336434, 86.97700845625813], [68.0294054067798, 62.0966987850401, 38.948684188300895, -1, 57.07889277132134, 168.86088949191284, 153.5838533179839, 125.78155667664477, 176.87566254292872, 119.03780911962384], [92.31467922275417, 96.42613753542138, 84.52810183601665, 57.07889277132134, -1, 158.3161394173064, 158.90248582070703, 163.3799253274404, 208.8276801575883, 171.23083834403195], [111.04053313993049, 126.15070352558483, 148.44864431849825, 168.86088949191284, 158.3161394173064, -1, 45.09988913511872, 135.67977004697494, 138.1774221788784, 191.54111830100607], [87.36131867136622, 99.53893710503444, 124.91997438360288, 153.5838533179839, 158.90248582070703, 45.09988913511872, -1, 93.02150289046077, 93.53608929178085, 151.82226450688975], [72.42237223399962, 67.26812023536856, 86.83317338436964, 125.78155667664477, 163.3799253274404, 135.67977004697494, 93.02150289046077, -1, 52.952809179494906, 61.71709649683789], [116.60617479361889, 115.88356225108029, 138.15932831336434, 176.87566254292872, 208.8276801575883, 138.1774221788784, 93.53608929178085, 52.952809179494906, -1, 103.4456378974], [99.12618221237011, 85.05292469985967, 86.97700845625813, 119.03780911962384, 171.23083834403195, 191.54111830100607, 151.82226450688975, 61.71709649683789, 103.4456378974, -1]]
#bin_point_list = [(0, 0), (8, 14), (34, 17), (68, -2), (71, -59), (-87, -69), (-84, -24), (-42, 59), (-94, 69), (5, 99)]

#bin_locations = [[-1, 18.439088914585774, 39.81205847478876, 55.226805085936306, 67.89698078707183, 67.11929677819934, 67.91170738539859, 86.0, 90.19977827023745, 96.33275663033837, 100.4987562112089, 93.55746896961247, 108.90821823902914, 124.96399481450646, 131.04579352272242, 102.83968105745953, 77.78174593052023, 74.00675644831355, 82.05485969764375, 66.48308055437865, 61.61168720299745, 58.60034129593445, 84.05950273467003, 106.01886624558857, 103.73041983911952, 107.07007051459338, 66.007575322837, 95.25754563287887, 83.48652585896721, 74.41102068914255, 88.23831367382311, 68.42514157822401, 81.34494452638098, 49.678969393496885, 46.09772228646444, 70.2353187506115, 92.02173656261873, 100.43903623591775, 108.2266141020775, 121.49485585818027], [18.439088914585774, -1, 32.01562118716424, 40.22437072223753, 53.009433122794285, 49.64876634922564, 49.47726750741192, 68.11754546370561, 72.69112738154499, 78.91767862779544, 82.21921916437786, 75.13321502504735, 91.52595260361949, 108.90362712049586, 116.60617479361889, 96.18731725128839, 73.33484846919642, 72.53275122315436, 80.77747210701756, 67.23094525588644, 64.4980619863884, 65.19202405202648, 91.96738552334735, 114.56002793295748, 117.18361660232202, 120.74767078498864, 84.0535543567314, 113.21660655575224, 100.84641788382967, 91.02197536858887, 103.23759005323593, 81.40024569987489, 92.78469701410896, 65.29931086925804, 40.80441152620633, 57.48912940721924, 84.38009243891595, 94.847245611035, 105.3612832116238, 115.83177456984762], [39.81205847478876, 32.01562118716424, -1, 24.020824298928627, 33.83784863137726, 42.190046219457976, 52.92447448959697, 77.82673062643708, 84.21995013059554, 90.4267659490264, 86.97700845625813, 77.3692445355388, 79.30952023559341, 90.4267659490264, 93.50935782048768, 64.38167441127949, 41.43669871020132, 42.04759208325728, 50.15974481593781, 39.05124837953327, 39.20459156782532, 45.31004303683677, 71.19691004531025, 93.49331526906082, 105.32331175955302, 109.23827168167757, 90.07774419910837, 129.0155029444136, 119.5198728245642, 112.0446339634344, 127.31457104353767, 108.2266141020775, 121.07848694132248, 88.75246475450696, 72.18032973047436, 82.37718130647589, 113.3181362359971, 124.91997438360288, 136.56500283747664, 145.60219778561037], [55.226805085936306, 40.22437072223753, 24.020824298928627, -1, 12.806248474865697, 18.681541692269406, 32.64965543462902, 58.25804665451803, 65.19202405202648, 71.06335201775948, 64.88451279003334, 54.78138369920935, 55.97320787662612, 69.81403870282824, 76.40026177965623, 65.25335240430181, 50.0, 55.97320787662612, 62.93647591023825, 56.938563381947034, 59.61543424315552, 67.91170738539859, 92.47702417357513, 114.06138698087096, 128.7245120402482, 132.67252918370102, 112.89375536317321, 149.25146565444507, 138.40520221436765, 129.634100452003, 143.01048912579805, 121.60592090848209, 132.92479076530458, 104.66135867644753, 72.83543093852057, 73.08214556237385, 107.07940978544848, 120.20815280171308, 134.18271125595876, 139.83204210766573], [67.89698078707183, 53.009433122794285, 33.83784863137726, 12.806248474865697, -1, 18.027756377319946, 35.35533905932738, 59.81638571495272, 67.00746227100382, 72.34638899074369, 63.00793600809346, 52.43090691567332, 45.70557952810576, 57.42821606144492, 63.60031446463138, 58.60034129593445, 48.41487374764082, 56.824290580701486, 62.68173577685928, 60.08327554319921, 64.32728814430156, 74.24284477308234, 97.01546268507923, 117.65202930676547, 135.44740676735012, 139.43457247038842, 123.8587905640936, 161.4187101918486, 150.86417732516887, 142.2708684165525, 155.79473675320358, 134.40238093129153, 145.64683312726027, 117.41379816699569, 84.17244204607586, 81.04936767180853, 115.73245007343446, 129.31357237351384, 144.00347218036097, 148.35430563350698], [67.11929677819934, 49.64876634922564, 42.190046219457976, 18.681541692269406, 18.027756377319946, -1, 17.46424919657298, 41.86884283091664, 49.040799340956916, 54.48853090330111, 46.52956049652737, 36.24913792078372, 41.88078318274385, 60.60528029800704, 71.69379331573968, 76.47875521999558, 65.79513659838392, 73.23933369440222, 79.64923100695951, 75.13321502504735, 78.18567643756751, 86.58521813797087, 111.07204868912791, 132.5028301584536, 147.31259280862582, 151.25144627407698, 128.7866452703851, 162.3607095328177, 150.41608956491322, 140.6627171641441, 152.3056138164316, 129.41792766073794, 139.31259813814398, 114.80853626799707, 73.00684899377592, 65.06919393998976, 100.04498987955368, 114.00438588054409, 129.46814279968643, 132.3782459469833], [67.91170738539859, 49.47726750741192, 52.92447448959697, 32.64965543462902, 35.35533905932738, 17.46424919657298, -1, 25.612496949731394, 32.55764119219941, 38.41874542459709, 34.52535300326414, 26.019223662515376, 48.010415536631214, 70.68238818828917, 84.64632301523794, 93.91485505499116, 82.13403679352427, 88.61715409558128, 95.4829827770373, 89.30845424706443, 91.30169768410661, 98.2344135219425, 123.8789731956154, 145.89036979869508, 157.69590990257166, 161.55494421403512, 132.84953895290718, 162.1172415260018, 148.97650821522163, 138.23530663329106, 147.87156589419075, 123.84667940643382, 132.24598292575845, 111.89280584559492, 62.42595614005443, 49.16299421312742, 84.09518416651456, 98.32598842625484, 114.42464769445436, 116.03878661895772], [86.0, 68.11754546370561, 77.82673062643708, 58.25804665451803, 59.81638571495272, 41.86884283091664, 25.612496949731394, -1, 7.211102550927978, 12.806248474865697, 17.204650534085253, 18.027756377319946, 55.57877292636101, 80.62257748298549, 98.00510190801293, 117.66052864066182, 107.48953437428223, 114.21471008587291, 121.01652779682617, 114.85643212288984, 116.61903789690601, 123.00406497347964, 149.00335566691106, 171.1724276862369, 181.51583952922675, 185.31055015837603, 152.00328943809077, 176.32356620712955, 161.96913286178943, 150.2165104108067, 156.97770542341354, 131.94695904036593, 137.84411485442533, 123.96773773849388, 66.03786792439622, 40.80441152620633, 72.11102550927978, 86.64871608973787, 104.17773274553444, 101.43470806385751], [90.19977827023745, 72.69112738154499, 84.21995013059554, 65.19202405202648, 67.00746227100382, 49.040799340956916, 32.55764119219941, 7.211102550927978, -1, 6.324555320336759, 18.867962264113206, 23.08679276123039, 61.1310068623117, 86.20904824900923, 104.04326023342406, 124.86793023030373, 114.58621208504974, 121.16517651536682, 128.03515142334936, 121.60592090848209, 123.17467272130257, 129.25169244539896, 155.4155719353759, 177.67385851610248, 187.275198571514, 191.03926298015284, 156.1569723067145, 178.86866690396056, 164.20109622045769, 152.2005256232711, 158.09490820390135, 132.9135057095403, 138.06158046321215, 126.1269202034205, 66.64082832618455, 38.897300677553446, 68.0294054067798, 82.46211251235322, 100.22474744293447, 96.317184344228], [96.33275663033837, 78.91767862779544, 90.4267659490264, 71.06335201775948, 72.34638899074369, 54.48853090330111, 38.41874542459709, 12.806248474865697, 6.324555320336759, -1, 18.439088914585774, 25.317977802344327, 63.0317380372777, 88.0, 106.38138934982942, 129.79984591670362, 120.20815280171308, 127.01574705523721, 133.79461872586654, 127.6401190848708, 129.3213052826177, 135.50645741070792, 161.62301816263673, 183.84776310850236, 193.59752064528098, 197.36261044078233, 162.24980739587951, 184.3529224069963, 169.5464538113375, 157.4325252290644, 162.85576440519384, 137.6154061142865, 142.29898102235308, 131.46862743635836, 71.30918594402827, 42.20189569201838, 68.96375859826666, 83.18653737234169, 101.11874208078342, 95.88013350011565], [100.4987562112089, 82.21921916437786, 86.97700845625813, 64.88451279003334, 63.00793600809346, 46.52956049652737, 34.52535300326414, 17.204650534085253, 18.867962264113206, 18.439088914585774, -1, 10.63014581273465, 45.39823785126467, 70.11419257183242, 88.95504482602435, 117.79643458101778, 111.40017953306898, 119.57006314291216, 125.67020331009256, 121.6552506059644, 124.48293055676348, 132.18925826253812, 157.30861387730806, 178.94133116750865, 192.09372712298546, 195.96938536414305, 166.24379687675568, 192.4421991144354, 178.35358140502814, 166.78429182629878, 173.97126199461795, 149.00335566691106, 155.03870484495155, 140.4563989286355, 83.21658488546619, 57.38466694161429, 86.76404785393545, 101.13357503816425, 118.9663818059539, 114.28473213863697], [93.55746896961247, 75.13321502504735, 77.3692445355388, 54.78138369920935, 52.43090691567332, 36.24913792078372, 26.019223662515376, 18.027756377319946, 23.08679276123039, 25.317977802344327, 10.63014581273465, -1, 38.05259518088089, 63.12685640834652, 81.15417426109393, 107.29864864013899, 100.80178569846865, 109.07795377618706, 115.10864433221339, 111.35977729862789, 114.38968484964018, 122.41323457861898, 147.2582765076381, 168.75129629131743, 182.6608879864543, 186.560981987124, 158.80806024884254, 186.89301752607025, 173.25414857947845, 162.04937519163718, 170.30854353202602, 145.64683312726027, 152.6106156202772, 135.6502856613284, 80.91971329657564, 58.309518948453004, 90.13878188659973, 104.67568963231147, 122.19656296312102, 119.23925528113634], [108.90821823902914, 91.52595260361949, 79.30952023559341, 55.97320787662612, 45.70557952810576, 41.88078318274385, 48.010415536631214, 55.57877292636101, 61.1310068623117, 63.0317380372777, 45.39823785126467, 38.05259518088089, -1, 25.079872407968907, 43.56604182158393, 83.21658488546619, 85.86617494683223, 96.88137075826292, 100.68763578513501, 102.59142264341595, 108.11567878897121, 119.01680553602503, 139.91783303067555, 159.05030650709227, 180.02499826412998, 184.0244548966251, 168.86681142249356, 204.07106605298068, 192.28364465029262, 182.5267103741258, 193.84787850270635, 170.53152201279386, 179.6941846582688, 156.60459763365824, 110.43550153822818, 93.637599285757, 127.09445306542689, 141.65097952361643, 158.80806024884254, 157.00318468107582], [124.96399481450646, 108.90362712049586, 90.4267659490264, 69.81403870282824, 57.42821606144492, 60.60528029800704, 70.68238818828917, 80.62257748298549, 86.20904824900923, 88.0, 70.11419257183242, 63.12685640834652, 25.079872407968907, -1, 20.12461179749811, 74.72616676907762, 85.05292469985967, 97.18538984847466, 99.02019995940222, 104.93807697875924, 111.80339887498948, 123.97580409095961, 141.28694207179942, 158.11388300841898, 183.3248482884958, 187.29655629509048, 180.23595645708434, 218.83783950679097, 208.21623375712088, 199.36148073286373, 212.13674834879504, 189.76301009416983, 199.90247622278218, 174.0919297382851, 132.59336333316233, 118.00423721205946, 151.85519418182574, 166.39711535961192, 183.3930205869351, 182.01373574541017], [131.04579352272242, 116.60617479361889, 93.50935782048768, 76.40026177965623, 63.60031446463138, 71.69379331573968, 84.64632301523794, 98.00510190801293, 104.04326023342406, 106.38138934982942, 88.95504482602435, 81.15417426109393, 43.56604182158393, 20.12461179749811, -1, 63.0317380372777, 78.84795495128583, 91.21403400793103, 91.41115905621152, 100.24470060806208, 107.91200118615167, 120.70211265756701, 134.73306943731373, 149.4824404403407, 177.56407294269863, 181.46349495146399, 181.1573901335521, 222.40728405337808, 212.9812198293549, 205.08047201037937, 219.20994502987313, 198.00252523642217, 209.1219739769114, 180.71247881648904, 144.69968901141425, 133.3641631023867, 167.87197502859135, 182.3211452355431, 198.8617610301186, 198.8164983093707], [102.83968105745953, 96.18731725128839, 64.38167441127949, 65.25335240430181, 58.60034129593445, 76.47875521999558, 93.91485505499116, 117.66052864066182, 124.86793023030373, 129.79984591670362, 117.79643458101778, 107.29864864013899, 83.21658488546619, 74.72616676907762, 63.0317380372777, -1, 26.419689627245813, 36.069377593742864, 32.449961479175904, 46.69047011971501, 55.17245689653489, 67.89698078707183, 74.84650960465692, 87.13208364316786, 117.74548823628021, 121.49074038789952, 133.79461872586654, 179.8054504179448, 173.9482681718907, 169.11830178901394, 186.55294154743314, 170.13524032369074, 183.8069639594757, 148.92951352905172, 135.1332675546625, 138.32208789632983, 172.2440129583609, 185.14858897652988, 198.45654436173174, 205.0], [77.78174593052023, 73.33484846919642, 41.43669871020132, 50.0, 48.41487374764082, 65.79513659838392, 82.13403679352427, 107.48953437428223, 114.58621208504974, 120.20815280171308, 111.40017953306898, 100.80178569846865, 85.86617494683223, 85.05292469985967, 78.84795495128583, 26.419689627245813, -1, 12.36931687685298, 14.866068747318506, 21.95449840010015, 30.23243291566195, 43.266615305567875, 56.32051136131489, 73.55270219373317, 98.84331034521254, 102.77159140540736, 108.18964830333815, 153.67498169838836, 147.56693396557372, 142.70599146496969, 160.22484201895784, 144.2497833620557, 158.14234094637652, 122.77621919573839, 113.6001760562016, 121.24768039018313, 153.70751445521458, 165.8010856418015, 177.89041570584965, 186.2605701698564], [74.00675644831355, 72.53275122315436, 42.04759208325728, 55.97320787662612, 56.824290580701486, 73.23933369440222, 88.61715409558128, 114.21471008587291, 121.16517651536682, 127.01574705523721, 119.57006314291216, 109.07795377618706, 96.88137075826292, 97.18538984847466, 91.21403400793103, 36.069377593742864, 12.36931687685298, -1, 8.246211251235321, 10.63014581273465, 19.1049731745428, 31.89043743820395, 44.10215414239989, 62.16912416947821, 86.49277426467485, 90.4267659490264, 97.74456506629922, 144.03124660989366, 138.7984149765407, 134.73678042761748, 152.85614151874958, 138.2931668593933, 152.5909564816998, 116.21101496846157, 113.3225485064645, 124.16923934694937, 155.3479964466874, 166.78429182629878, 177.88198334851114, 187.55265927200287], [82.05485969764375, 80.77747210701756, 50.15974481593781, 62.93647591023825, 62.68173577685928, 79.64923100695951, 95.4829827770373, 121.01652779682617, 128.03515142334936, 133.79461872586654, 125.67020331009256, 115.10864433221339, 100.68763578513501, 99.02019995940222, 91.41115905621152, 32.449961479175904, 14.866068747318506, 8.246211251235321, -1, 16.76305461424021, 24.596747752497688, 36.40054944640259, 43.41658669218482, 59.135437767890075, 86.40023148117139, 90.24965373894794, 102.61578825892242, 149.4958193395387, 144.90341610879986, 141.315250415516, 159.70284906663375, 145.71547618561317, 160.12495120998477, 123.45444503945575, 121.56479753612885, 132.09844813622905, 163.47782724271815, 174.9771413642365, 186.12361483702168, 195.72429588581997], [66.48308055437865, 67.23094525588644, 39.05124837953327, 56.938563381947034, 60.08327554319921, 75.13321502504735, 89.30845424706443, 114.85643212288984, 121.60592090848209, 127.6401190848708, 121.6552506059644, 111.35977729862789, 102.59142264341595, 104.93807697875924, 100.24470060806208, 46.69047011971501, 21.95449840010015, 10.63014581273465, 16.76305461424021, -1, 8.48528137423857, 21.400934559032695, 37.33630940518894, 57.584720195551874, 78.40918313565064, 82.38931969618392, 87.11486669908874, 133.4541119636259, 128.41339493993607, 124.61540835707277, 142.9475428260311, 129.0658746532173, 143.54441821262157, 106.73331251301067, 107.91200118615167, 121.24768039018313, 151.18200951171406, 162.04937519163718, 172.35138525698017, 182.98907071188705], [61.61168720299745, 64.4980619863884, 39.20459156782532, 59.61543424315552, 64.32728814430156, 78.18567643756751, 91.30169768410661, 116.61903789690601, 123.17467272130257, 129.3213052826177, 124.48293055676348, 114.38968484964018, 108.11567878897121, 111.80339887498948, 107.91200118615167, 55.17245689653489, 30.23243291566195, 19.1049731745428, 24.596747752497688, 8.48528137423857, -1, 13.038404810405298, 32.89376840679705, 54.589376255824725, 72.02777242147643, 76.02631123499285, 78.64477096412705, 125.09996003196804, 120.30793822520607, 116.81181447096864, 135.35878250043476, 122.18837915284743, 136.82470537150812, 99.6393496566492, 104.69479452198185, 120.10412149464314, 148.86235252742716, 159.21055241409096, 168.7986966774329, 180.24705268048075], [58.60034129593445, 65.19202405202648, 45.31004303683677, 67.91170738539859, 74.24284477308234, 86.58521813797087, 98.2344135219425, 123.00406497347964, 129.25169244539896, 135.50645741070792, 132.18925826253812, 122.41323457861898, 119.01680553602503, 123.97580409095961, 120.70211265756701, 67.89698078707183, 43.266615305567875, 31.89043743820395, 36.40054944640259, 21.400934559032695, 13.038404810405298, -1, 26.90724809414742, 49.57822102496216, 61.204574992397426, 65.19202405202648, 66.21933252457322, 113.20777358467925, 109.2520022699813, 106.60675400742676, 125.63439019631528, 114.15778554264269, 129.0620006043607, 91.26883367283708, 103.77379245262264, 122.3315167894194, 149.03019828209315, 158.47397262642215, 166.82026255823962, 179.56892826989863], [84.05950273467003, 91.96738552334735, 71.19691004531025, 92.47702417357513, 97.01546268507923, 111.07204868912791, 123.8789731956154, 149.00335566691106, 155.4155719353759, 161.62301816263673, 157.30861387730806, 147.2582765076381, 139.91783303067555, 141.28694207179942, 134.73306943731373, 74.84650960465692, 56.32051136131489, 44.10215414239989, 43.41658669218482, 37.33630940518894, 32.89376840679705, 26.90724809414742, -1, 22.67156809750927, 43.01162633521314, 46.84015371452148, 73.08214556237385, 120.81390648431164, 120.41594578792295, 120.50311199301038, 140.356688476182, 132.74034804836094, 147.8681845428556, 109.77249200050075, 129.84991336154215, 149.21461054467824, 175.41379649275024, 184.43969204051496, 192.02343606966312, 205.5164227014474], [106.01886624558857, 114.56002793295748, 93.49331526906082, 114.06138698087096, 117.65202930676547, 132.5028301584536, 145.89036979869508, 171.1724276862369, 177.67385851610248, 183.84776310850236, 178.94133116750865, 168.75129629131743, 159.05030650709227, 158.11388300841898, 149.4824404403407, 87.13208364316786, 73.55270219373317, 62.16912416947821, 59.135437767890075, 57.584720195551874, 54.589376255824725, 49.57822102496216, 22.67156809750927, -1, 36.87817782917155, 39.59797974644666, 85.09406559801923, 131.03434664239754, 133.18408313308313, 135.1332675546625, 155.15798400340216, 150.23315213360866, 165.32694880145826, 127.57742747053649, 152.00328943809077, 171.86331778480246, 197.71696942852427, 206.45580640902304, 213.5158073773462, 227.50164834567684], [103.73041983911952, 117.18361660232202, 105.32331175955302, 128.7245120402482, 135.44740676735012, 147.31259280862582, 157.69590990257166, 181.51583952922675, 187.275198571514, 193.59752064528098, 192.09372712298546, 182.6608879864543, 180.02499826412998, 183.3248482884958, 177.56407294269863, 117.74548823628021, 98.84331034521254, 86.49277426467485, 86.40023148117139, 78.40918313565064, 72.02777242147643, 61.204574992397426, 43.01162633521314, 36.87817782917155, -1, 4.0, 60.40695324215582, 101.00495037373169, 106.36728820459794, 111.12605455067681, 130.728726758888, 131.0953851209111, 145.6193668438371, 110.14535850411491, 148.67750334196495, 173.738308959193, 194.3707796969493, 200.83824337013107, 204.89265482198232, 221.33458834985552], [107.07007051459338, 120.74767078498864, 109.23827168167757, 132.67252918370102, 139.43457247038842, 151.25144627407698, 161.55494421403512, 185.31055015837603, 191.03926298015284, 197.36261044078233, 195.96938536414305, 186.560981987124, 184.0244548966251, 187.29655629509048, 181.46349495146399, 121.49074038789952, 102.77159140540736, 90.4267659490264, 90.24965373894794, 82.38931969618392, 76.02631123499285, 65.19202405202648, 46.84015371452148, 39.59797974644666, 4.0, -1, 61.84658438426491, 101.1236866416568, 107.07940978544848, 112.27199116431488, 131.73458164050928, 132.82319074619463, 147.2311108427835, 112.16059914247963, 151.81897114655993, 177.15812146215595, 197.43353311937665, 203.7253052519495, 207.53072061745462, 224.1539649437413], [66.007575322837, 84.0535543567314, 90.07774419910837, 112.89375536317321, 123.8587905640936, 128.7866452703851, 132.84953895290718, 152.00328943809077, 156.1569723067145, 162.24980739587951, 166.24379687675568, 158.80806024884254, 168.86681142249356, 180.23595645708434, 181.1573901335521, 133.79461872586654, 108.18964830333815, 97.74456506629922, 102.61578825892242, 87.11486669908874, 78.64477096412705, 66.21933252457322, 73.08214556237385, 85.09406559801923, 60.40695324215582, 61.84658438426491, -1, 47.92702786528704, 48.093658625644196, 50.99019513592785, 70.8590149522275, 71.19691004531025, 85.42833253669417, 51.73973328110612, 102.52804494381037, 132.43866504914644, 145.41320435228707, 149.21461054467824, 150.33296378372907, 168.6001186239203], [95.25754563287887, 113.21660655575224, 129.0155029444136, 149.25146565444507, 161.4187101918486, 162.3607095328177, 162.1172415260018, 176.32356620712955, 178.86866690396056, 184.3529224069963, 192.4421991144354, 186.89301752607025, 204.07106605298068, 218.83783950679097, 222.40728405337808, 179.8054504179448, 153.67498169838836, 144.03124660989366, 149.4958193395387, 133.4541119636259, 125.09996003196804, 113.20777358467925, 120.81390648431164, 131.03434664239754, 101.00495037373169, 101.1236866416568, 47.92702786528704, -1, 16.492422502470642, 29.614185789921695, 39.698866482558415, 56.92099788303083, 65.0, 53.23532661682466, 115.27792503337315, 147.33974345029924, 149.11069713471264, 148.22280526288793, 143.54441821262157, 164.21023110634732], [83.48652585896721, 100.84641788382967, 119.5198728245642, 138.40520221436765, 150.86417732516887, 150.41608956491322, 148.97650821522163, 161.96913286178943, 164.20109622045769, 169.5464538113375, 178.35358140502814, 173.25414857947845, 192.28364465029262, 208.21623375712088, 212.9812198293549, 173.9482681718907, 147.56693396557372, 138.7984149765407, 144.90341610879986, 128.41339493993607, 120.30793822520607, 109.2520022699813, 120.41594578792295, 133.18408313308313, 106.36728820459794, 107.07940978544848, 48.093658625644196, 16.492422502470642, -1, 13.152946437965905, 26.076809620810597, 40.496913462633174, 49.4064773081425, 38.07886552931954, 99.72462083156798, 131.7459676802292, 132.67252918370102, 131.73458164050928, 127.23600119463045, 147.82760229402356], [74.41102068914255, 91.02197536858887, 112.0446339634344, 129.634100452003, 142.2708684165525, 140.6627171641441, 138.23530663329106, 150.2165104108067, 152.2005256232711, 157.4325252290644, 166.78429182629878, 162.04937519163718, 182.5267103741258, 199.36148073286373, 205.08047201037937, 169.11830178901394, 142.70599146496969, 134.73678042761748, 141.315250415516, 124.61540835707277, 116.81181447096864, 106.60675400742676, 120.50311199301038, 135.1332675546625, 111.12605455067681, 112.27199116431488, 50.99019513592785, 29.614185789921695, 13.152946437965905, -1, 20.024984394500787, 27.730849247724095, 38.18376618407357, 26.40075756488817, 87.13208364316786, 119.07980517283357, 119.5198728245642, 118.68024266911489, 114.54256850621083, 135.00370365289984], [88.23831367382311, 103.23759005323593, 127.31457104353767, 143.01048912579805, 155.79473675320358, 152.3056138164316, 147.87156589419075, 156.97770542341354, 158.09490820390135, 162.85576440519384, 173.97126199461795, 170.30854353202602, 193.84787850270635, 212.13674834879504, 219.20994502987313, 186.55294154743314, 160.22484201895784, 152.85614151874958, 159.70284906663375, 142.9475428260311, 135.35878250043476, 125.63439019631528, 140.356688476182, 155.15798400340216, 130.728726758888, 131.73458164050928, 70.8590149522275, 39.698866482558415, 26.076809620810597, 20.024984394500787, -1, 25.298221281347036, 26.92582403567252, 38.600518131237564, 91.54780172128658, 122.41323457861898, 117.00427342623003, 113.7453295744489, 106.7379969832674, 127.81627439414747], [68.42514157822401, 81.40024569987489, 108.2266141020775, 121.60592090848209, 134.40238093129153, 129.41792766073794, 123.84667940643382, 131.94695904036593, 132.9135057095403, 137.6154061142865, 149.00335566691106, 145.64683312726027, 170.53152201279386, 189.76301009416983, 198.00252523642217, 170.13524032369074, 144.2497833620557, 138.2931668593933, 145.71547618561317, 129.0658746532173, 122.18837915284743, 114.15778554264269, 132.74034804836094, 150.23315213360866, 131.0953851209111, 132.82319074619463, 71.19691004531025, 56.92099788303083, 40.496913462633174, 27.730849247724095, 25.298221281347036, -1, 15.132745950421556, 23.021728866442675, 66.30987860040162, 97.12363255150623, 93.26306878931231, 91.44397191723465, 86.81589716175259, 107.33592129385204], [81.34494452638098, 92.78469701410896, 121.07848694132248, 132.92479076530458, 145.64683312726027, 139.31259813814398, 132.24598292575845, 137.84411485442533, 138.06158046321215, 142.29898102235308, 155.03870484495155, 152.6106156202772, 179.6941846582688, 199.90247622278218, 209.1219739769114, 183.8069639594757, 158.14234094637652, 152.5909564816998, 160.12495120998477, 143.54441821262157, 136.82470537150812, 129.0620006043607, 147.8681845428556, 165.32694880145826, 145.6193668438371, 147.2311108427835, 85.42833253669417, 65.0, 49.4064773081425, 38.18376618407357, 26.92582403567252, 15.132745950421556, -1, 38.118237105091836, 71.84705978674423, 100.64790112068906, 91.35097153287424, 87.20665112249179, 79.81227975693966, 100.89598604503551], [49.678969393496885, 65.29931086925804, 88.75246475450696, 104.66135867644753, 117.41379816699569, 114.80853626799707, 111.89280584559492, 123.96773773849388, 126.1269202034205, 131.46862743635836, 140.4563989286355, 135.6502856613284, 156.60459763365824, 174.0919297382851, 180.71247881648904, 148.92951352905172, 122.77621919573839, 116.21101496846157, 123.45444503945575, 106.73331251301067, 99.6393496566492, 91.26883367283708, 109.77249200050075, 127.57742747053649, 110.14535850411491, 112.16059914247963, 51.73973328110612, 53.23532661682466, 38.07886552931954, 26.40075756488817, 38.600518131237564, 23.021728866442675, 38.118237105091836, -1, 62.07253821135398, 94.13288479590966, 98.67117106835208, 100.17983829094555, 99.40321926376429, 118.51160280748886], [46.09772228646444, 40.80441152620633, 72.18032973047436, 72.83543093852057, 84.17244204607586, 73.00684899377592, 62.42595614005443, 66.03786792439622, 66.64082832618455, 71.30918594402827, 83.21658488546619, 80.91971329657564, 110.43550153822818, 132.59336333316233, 144.69968901141425, 135.1332675546625, 113.6001760562016, 113.3225485064645, 121.56479753612885, 107.91200118615167, 104.69479452198185, 103.77379245262264, 129.84991336154215, 152.00328943809077, 148.67750334196495, 151.81897114655993, 102.52804494381037, 115.27792503337315, 99.72462083156798, 87.13208364316786, 91.54780172128658, 66.30987860040162, 71.84705978674423, 62.07253821135398, -1, 32.0624390837628, 45.967379738244816, 54.70831746635972, 64.5600495662759, 75.8023746329889], [70.2353187506115, 57.48912940721924, 82.37718130647589, 73.08214556237385, 81.04936767180853, 65.06919393998976, 49.16299421312742, 40.80441152620633, 38.897300677553446, 42.20189569201838, 57.38466694161429, 58.309518948453004, 93.637599285757, 118.00423721205946, 133.3641631023867, 138.32208789632983, 121.24768039018313, 124.16923934694937, 132.09844813622905, 121.24768039018313, 120.10412149464314, 122.3315167894194, 149.21461054467824, 171.86331778480246, 173.738308959193, 177.15812146215595, 132.43866504914644, 147.33974345029924, 131.7459676802292, 119.07980517283357, 122.41323457861898, 97.12363255150623, 100.64790112068906, 94.13288479590966, 32.0624390837628, -1, 35.0, 49.16299421312742, 65.5133574166368, 67.36467917239716], [92.02173656261873, 84.38009243891595, 113.3181362359971, 107.07940978544848, 115.73245007343446, 100.04498987955368, 84.09518416651456, 72.11102550927978, 68.0294054067798, 68.96375859826666, 86.76404785393545, 90.13878188659973, 127.09445306542689, 151.85519418182574, 167.87197502859135, 172.2440129583609, 153.70751445521458, 155.3479964466874, 163.47782724271815, 151.18200951171406, 148.86235252742716, 149.03019828209315, 175.41379649275024, 197.71696942852427, 194.3707796969493, 197.43353311937665, 145.41320435228707, 149.11069713471264, 132.67252918370102, 119.5198728245642, 117.00427342623003, 93.26306878931231, 91.35097153287424, 98.67117106835208, 45.967379738244816, 35.0, -1, 14.560219778561036, 32.202484376209235, 32.7566787083184], [100.43903623591775, 94.847245611035, 124.91997438360288, 120.20815280171308, 129.31357237351384, 114.00438588054409, 98.32598842625484, 86.64871608973787, 82.46211251235322, 83.18653737234169, 101.13357503816425, 104.67568963231147, 141.65097952361643, 166.39711535961192, 182.3211452355431, 185.14858897652988, 165.8010856418015, 166.78429182629878, 174.9771413642365, 162.04937519163718, 159.21055241409096, 158.47397262642215, 184.43969204051496, 206.45580640902304, 200.83824337013107, 203.7253052519495, 149.21461054467824, 148.22280526288793, 131.73458164050928, 118.68024266911489, 113.7453295744489, 91.44397191723465, 87.20665112249179, 100.17983829094555, 54.70831746635972, 49.16299421312742, 14.560219778561036, -1, 18.027756377319946, 21.095023109728988], [108.2266141020775, 105.3612832116238, 136.56500283747664, 134.18271125595876, 144.00347218036097, 129.46814279968643, 114.42464769445436, 104.17773274553444, 100.22474744293447, 101.11874208078342, 118.9663818059539, 122.19656296312102, 158.80806024884254, 183.3930205869351, 198.8617610301186, 198.45654436173174, 177.89041570584965, 177.88198334851114, 186.12361483702168, 172.35138525698017, 168.7986966774329, 166.82026255823962, 192.02343606966312, 213.5158073773462, 204.89265482198232, 207.53072061745462, 150.33296378372907, 143.54441821262157, 127.23600119463045, 114.54256850621083, 106.7379969832674, 86.81589716175259, 79.81227975693966, 99.40321926376429, 64.5600495662759, 65.5133574166368, 32.202484376209235, 18.027756377319946, -1, 21.213203435596427], [121.49485585818027, 115.83177456984762, 145.60219778561037, 139.83204210766573, 148.35430563350698, 132.3782459469833, 116.03878661895772, 101.43470806385751, 96.317184344228, 95.88013350011565, 114.28473213863697, 119.23925528113634, 157.00318468107582, 182.01373574541017, 198.8164983093707, 205.0, 186.2605701698564, 187.55265927200287, 195.72429588581997, 182.98907071188705, 180.24705268048075, 179.56892826989863, 205.5164227014474, 227.50164834567684, 221.33458834985552, 224.1539649437413, 168.6001186239203, 164.21023110634732, 147.82760229402356, 135.00370365289984, 127.81627439414747, 107.33592129385204, 100.89598604503551, 118.51160280748886, 75.8023746329889, 67.36467917239716, 32.7566787083184, 21.095023109728988, 21.213203435596427, -1]]
#bin_point_list = [(0, 0), (4, 18), (36, 17), (37, 41), (47, 49), (32, 59), (16, 66), (0, 86), (-6, 90), (-8, 96), (10, 100), (17, 92), (55, 94), (80, 96), (98, 87), (100, 24), (77, 11), (74, -1), (82, -3), (66, -8), (60, -14), (53, -25), (71, -45), (86, -62), (58, -86), (58, -90), (1, -66), (-43, -85), (-47, -69), (-49, -56), (-69, -55), (-61, -31), (-76, -29), (-38, -32), (-35, 30), (-33, 62), (-68, 62), (-82, 58), (-97, 48), (-100, 69)]
print("dane poczatkowe")

"""
#rubbish_in_location = [0, 4, 3, 3, 5, 8, 10, 4,5,5 ,4,5,8,7,4,5,6,7,8,4]*5  # ilosc smieci od kazdego miasta
                                                                                # index 0 baza
#trucks_volume = [1000, 1000,1000] # pojemnosci
# koniec danych wejsciowych

#trucks_filled_volume = [0] * len(trucks_volume)
trucks_returns = [0] * len(trucks_volume)


def first_solution_areas(location: List, trucks: List, points_per_area: List):
    _solution = [0] * len(trucks)  # przyjmuje globalne bin_location, garbage_trucks
    number = 1
    for i in range(len(points_per_area)):
        _solution[i] = list(range(number, number+points_per_area[i]))
        number = number+points_per_area[i]
    print(_solution)
    return _solution


def first_solution(location: List, trucks: List) -> List:  # rozdziel po rowno
    solution = [0] * len(trucks)  # przyjmuje globalne bin_location, garbage_trucks
    bins_amount = int((len(location) - 1) / len(trucks))  # zwraca poczatkowe solution
    rest = (len(location) - 1) % len(trucks)
    _from = 1
    _to = 1
    for i in range(0, len(trucks)):
        _to += bins_amount
        if rest != 0:
            _to += 1
            rest -= 1
        solution[i] = list(range(_from, _to))
        _from = _to
    # print(solution)
    return solution


def count_cost(solution: List):  # funkcja kosztu dla sollution
    cost = 0
    for num_truck in range(0, len(solution)):
        cost += truck_ride_cost(solution[num_truck], num_truck)
        #print("koszt przejazdu", cost)
    return cost

def truck_ride_cost(locations: List, num_truck: int):  # zwraca koszt dla jednej ≈õmieciarki
    # print(locations)
    if locations == []:
        return 0
    trucks_returns[num_truck] = 0
    trucks_filled_volume = [0] * len(trucks_volume)
    ride_cost = bin_locations[0][locations[0]]  # od bazy 0 do pierwszego na liscie

    for i in range(0, len(locations)):
        trucks_filled_volume[num_truck] += rubbish_in_location[locations[i]]  # zaladowanie smieci
        #print(trucks_filled_volume)
        if (i + 1 >= len(locations)):  # jesli ostatni

            try:
                ride_cost += bin_locations[locations[i]][0]
            except IndexError:
                print('len(bin_location):', len(bin_locations))
                print('len(locations):', len(locations))
                print("Aktualne i=", i)
                print('locations[i] ', locations[i])
                print('locations ', locations)
                print('bin_locations ', bin_locations)
                print('bin_locations[locations[i]] ', bin_locations[locations[i]])
                raise Exception
            return ride_cost

        #print("pojemnosc smieciarki", i,":", trucks_volume[num_truck])
        #print("pojemnosc zajeta smieciarki", i,":", trucks_filled_volume[num_truck])
        #print("ilosc smieci w nastepnej lokacji",rubbish_in_location[locations[i+1]])

        if (trucks_volume[num_truck] < trucks_filled_volume[num_truck] + rubbish_in_location[locations[i+1]]):  # wroc do bazy jesli smieciarka pelna
            ride_cost += bin_locations[locations[i]][0]
            trucks_filled_volume[num_truck] = 0
            ride_cost += bin_locations[0][locations[i + 1]]
            trucks_returns[num_truck] = trucks_returns[num_truck] + 1
            #print("powrot")

        else:
            ride_cost += bin_locations[locations[i]][locations[i + 1]]

    return ride_cost

# rozwiazanie = first_solution(list(range(0,6)),list(range(0,3)))

solution = first_solution_areas(location=bin_locations, trucks=trucks_volume, points_per_area=ilosc_punktow_na_strefe)
#solution = first_solution(bin_locations, trucks_volume)
#print(solution)
cost = count_cost(solution)
#print(cost)

#### END OF PART TWO ####


#### PART THREE ####
'''######LISTA TABU#########
# {typ_zabronienia1:[ konkretne zabronienia ], typ_zabronienia2: [ konkretne zabronienia ] itd.
# typ1 (i,n)zakaz zmiany i tego kosza na n iteracji
# typ2 (i,j,n) elementu i, j nie moga byc ko≈Ço siebie przez n iteracji
# typ3 (i,j,n) i-ty kosz nie w j-tej smieciarce przez n kadencji
#...
'''
#TABU = {1: [[1, 10], [3, 2], [4, 5]], 2: [[1, 2, 3], [3, 5, 6]], 3: [[3,0,10], [2,1,15],[5,2,12]]}
TABU = {1:[], 2:[],3:[]}


def add_to_TABU(TABU: Dict, new_TABU: List,type: int) -> Dict:  # jako argument ogonie TABU, nowe pojedyncze zabronienie i jego typ(patrz komentarz wyzej)
    #mozna zaimplementowaƒá blokowanie dopisywania tych samych list
    TABU[type].append(new_TABU)
    return TABU
def print_TABU(TABU: Dict):
    for type in TABU:
        print(type, '->', TABU[type])

''' Funkcje zmieniajace rozwiazanie:
    ch - change + w jaki sposob
#1)
'''
def ch_returns(solution: List) -> List:
    new_solution = deepcopy(solution)
    truck_max = trucks_returns.index(max(trucks_returns))  # zwraca ktora smieciarka wykonala najwiecej powrotow
    truck_min = trucks_returns.index(min(trucks_returns))  # zwraca ktora smieciarka wykonala najmniej powrotow

    new_solution[truck_min].append(new_solution[truck_max][-1])
    del (new_solution[truck_max][-1])

    #sprawdz czy kosz ktory funkcja chce zmienic nie jest w TABU
    if check_ban_t1(new_solution[truck_max][-1]):
        # Sprawdzanie czy nowe rozwiazanie jest dozwolone
        if check_ban_t2(new_solution) and check_ban_t3(new_solution):
            return new_solution

    if (aspiration(solution,new_solution)): #jesli aspiracja zadziala
        return new_solution
    return solution
def ch_swap(solution: List) -> List:
    new_solution = deepcopy(solution)
    for route in new_solution:
        if(len(route)>=2):
            pair = random.sample(range(0,len(route)), 2)
            route[pair[0]], route[pair[1]] = route[pair[1]], route[pair[0]]

            if check_ban_t1(route[pair[0]]) and check_ban_t1(route[pair[1]]):
                if check_ban_t2(new_solution) and check_ban_t3(new_solution):
                    return new_solution

    if (aspiration(solution,new_solution)): #jesli aspiracja zadziala
        return new_solution
    return solution
def ch_truck(solution: List) -> List:   #zamien smieciarki jesli ta o mniejszej pojemnosci wykonala wiecej powrotow
    new_solution = deepcopy(solution)
    truck_max = trucks_returns.index(max(trucks_returns))   # zwraca ktora smieciarka wykonala najwiecej powrotow
    truck_min = trucks_returns.index(min(trucks_returns))    # zwraca ktora smieciarka wykonala najmniej powrotow
    new_solution[truck_max], new_solution[truck_min] = new_solution[truck_min], new_solution[truck_max]

    if trucks_volume[truck_max] < trucks_volume[truck_min]:
        if check_ban_t3(new_solution):
            return new_solution

    if (aspiration(solution,new_solution)): #jesli aspiracja zadziala
        return new_solution
    return solution
def ch_bins(solution: List) -> List:
    new_solution = deepcopy(solution)
    random_bin = random.randint(1, len(bin_locations)-1)
    bin_pos = [(index, row.index(random_bin)) for index, row in enumerate(new_solution) if random_bin in row][0] # bin_pos ->[ktora smieciarka, ktory kosz z kolei] - indexy elementu w macierzy
    #print("binpos",bin_pos)

    del(new_solution[bin_pos[0]][bin_pos[1]])
    random_truck = random.randint(0,len(new_solution)-1)
    new_bin_pos = random.randint(0,len(new_solution[random_truck]))

    new_solution[random_truck].insert(new_bin_pos, random_bin)

    if check_ban_t1(random_bin):
        if check_ban_t2(new_solution) and check_ban_t3(new_solution):
            return new_solution

    if (aspiration(solution,new_solution)): #jesli aspiracja zadziala
        return new_solution
    return solution
def ch_del_max(solution: List): # usun najdalszy przejazd jaki wystepuje w rozwiazaniu
    new_solution = deepcopy(solution)
    max_p2p_for_truck = [] #maksymalny przejazd dla kazdej smieciarki
    max_p2p_for_truck_value = [] #i jego warto≈õƒá
    for route in solution:
        #print("route: ", route)
        if len(route) > 2:
            p2p_values = []
            for i in range( len(route) - 1):
                p2p_values.append(bin_locations[route[i]][route[i + 1]])
            #print(p2p_values)

            od = route[p2p_values.index(max(p2p_values))]
            do = route[p2p_values.index(max(p2p_values)) + 1]
            max_p2p_for_truck.append([od, do])
            max_p2p_for_truck_value.append(bin_locations[od][do])

        elif len(route) == 2:
            max_p2p_for_truck.append([route[0], route[1]])
            max_p2p_for_truck_value.append(bin_locations[route[0]][route[1]])

    index_of_max = max_p2p_for_truck_value.index(max(max_p2p_for_truck_value)) #zwroci index najdluzszego przejazdu
    [od, do] = max_p2p_for_truck[index_of_max]
    #print(od,do)

    #przenies losowy kosz z wybranej pary [od do] do innej losowej smieciarki
    if random.randint(0, 1):
        random_bin = od
    else:
        random_bin = do

    bin_pos = [(index, row.index(random_bin)) for index, row in enumerate(new_solution) if random_bin in row][0]

    del(new_solution[bin_pos[0]][bin_pos[1]])
    random_truck = random.randint(0,len(new_solution)-1)
    new_bin_pos = random.randint(0,len(new_solution[random_truck]))

    new_solution[random_truck].insert(new_bin_pos, random_bin)

    if check_ban_t1(random_bin):
        if check_ban_t2(new_solution) and check_ban_t3(new_solution):
            return new_solution

    if aspiration(solution,new_solution): #jesli aspiracja zadziala
        return new_solution
    return new_solution
   # tabu_iteration = 10 pozostalosp po ban_max2
   # add_to_TABU(TABU, [od, do, tabu_iteration], 2)

''' Funkcjie zabraniajace:
    ban - zabron rozwiazaie
1) policz max przejazd dla smieciarki i zabron go
'''

def ban_max(solution: List): # zabron najdlu≈ºsze przejazdy dla kazdej ze smieciarek
    for route in solution:
        if len(route) > 2:
            p2p_values = []
            for i in range(len(route) - 1):
                p2p_values.append(bin_locations[route[i]][route[i + 1]])
            print(p2p_values)

            od = route[p2p_values.index(max(p2p_values))]
            do = route[p2p_values.index(max(p2p_values)) + 1]
            print(od, do)
            print(p2p_values.index(max(p2p_values)))

            tabu_iteration = 5  # mozna wybrac na ile iteracji
            # zabro≈Ñ i zmie≈Ñ(opcjonalnie)
            add_to_TABU(TABU, [od, do, tabu_iteration], 2)  # zabron

    # zapisc nie do tabu tylko zrobiƒá liste i zrobic max dla calosci
def ban_min(solution: List):# zabron zmeniac najkrotszych odcinkow
    for route in solution:
        if (len(route) > 2):
            p2p_values = []
            for i in range(len(route) - 1):
                p2p_values.append(bin_locations[route[i]][route[i + 1]])
            #print(p2p_values)

            od = route[p2p_values.index(min(p2p_values))]
            do = route[p2p_values.index(min(p2p_values)) + 1]
            #print(od, do)
            #print(p2p_values.index(max(p2p_values)))
            tabu_iteration = 100
            add_to_TABU(TABU, [od, tabu_iteration], 1)  # zabron
            add_to_TABU(TABU, [do, tabu_iteration], 1)  # zabron
def ban_max3(solution: List):
    print(max(solution))


'''Sprawdz czy nie zabronione
    dla danego rozwiazania, sprawdz czy TABU nie zabrania
'''
#jesli funkcja chce zmienic i ty kosz to zwroc False
def check_ban_t1(point:int)-> bool:
    if TABU[1] == []:
        return True
    banned_points = []
    for pair in TABU[1]:
        banned_points.append(pair[0])
    if point in banned_points:
        return False
    else:
        return True
#jesli w nowym rozwiazaniu kosze z Tabu sa obok siebie zroci False
def check_ban_t2(solution: List) -> bool:
    if TABU[2] == []:
        return True
    for triple in TABU[2]:
        pos_point1 = [(index, row.index(triple[0])) for index, row in enumerate(solution) if triple[0] in row]
        pos_point2 = [(index, row.index(triple[1])) for index, row in enumerate(solution) if triple[1] in row]

        #print(pos_point1[0], pos_point2[0])
        if pos_point1[0][0] == pos_point2[0][0]: #jesli w tej samej ≈õmieciarce
            if abs(pos_point1[0][1] - pos_point2[0][1]) == 1: #je≈õli sa obok siebie
                return False
    return True
#jesli w nowym rozwiazaniu kosz jesz w zabronionej smieciarce zwroc False
def check_ban_t3(solution: List) -> bool:
    if TABU[3] == []:
        return True
    for triple in TABU[3]:
        pos_point = [(index, row.index(triple[0])) for index, row in enumerate(solution) if triple[0] in row]
        if pos_point[0][0] == triple[1]:    #czy kosz jest w zabronionej smieciarce
            return False
    return True

#### END OF PART THREE ####

print(TABU)
print(solution)
print(count_cost(solution))
print(count_cost(solution))
print(count_cost(solution))
print('koszty')

ban_min(solution)

print(TABU)

#ch_del_max(solution)
print('TYLE')

#### PART FOUR ####
#Memories

medium_term_memory = {} #lista najlepszych rozwiƒÖzan
iterations_without_change = 0

#Aspiration
def aspiration(solution:List, new_solution:List):# zwroci TRUE jesli aspiracja ma zadzialac
    for j in range(0,len(solution)) :
        if( truck_ride_cost(solution[j],j) < truck_ride_cost(new_solution[j],j) ):
            return True
    return False
####END OF PART FOUR ####


#### TABU SEARCH ####

x0 = deepcopy(solution) # x0 <=> solution
x_opt = deepcopy(solution)

solution_change = True  # Po to aby pokazac pierwsza opcje
ShowSolutions.show_routes(x_opt, bin_point_list)

print("START")
print("First solution >", solution, count_cost(solution))
for i in range(0, 100000):
    if i % 1000 == 0:
        pass
        #print(i)

    '''zmien rozwiazanie'''
    x0 = deepcopy(x_opt)
    change_probability = random.randint(1, 100)

    if(change_probability in range(1,60)):
       # print('1')
       x0 = ch_returns(x0)
    if change_probability in range(1, 20):
       # print('2')
        x0 = ch_swap(x0)
    if change_probability in range(50, 60):
       # print('3')
        x0 = ch_truck(x0)
    if change_probability in range(40, 80):
       # print('4')
        x0 = ch_bins(x0)
    if change_probability in range(1,100):
        x0 = ch_del_max(x0)
    #x = deepcopy(x0)

    #print(x, " -> ", count_cost(x))

    cost_x0 = count_cost(x0)
    #print("nowy koszt: ",cost_x0)
    #ShowSolutions.show_routes(x0, bin_point_list)
    cost_x_opt = count_cost(x_opt)
    if cost_x0 < cost_x_opt:
       # print("xopt",x_opt, " --> ", cost_x_opt)
        #print("x0", x0, " --> ", cost_x0)

        x_opt = deepcopy(x0)

        solution_change = True
        iterations_without_change = 0
    else:
        iterations_without_change = iterations_without_change + 1

    '''skroc o 1 kadencje'''
    for type_T in TABU:
        for single_tabu in TABU[type_T]:
            if len(single_tabu) == 0 or single_tabu[-1] == 1:  # jesli kadencja = 0 to usu≈Ñ zabronienie
                TABU[type_T].remove(single_tabu)
            else:
                single_tabu[-1] = single_tabu[-1] - 1

    '''Dodaj nowe elementy do listy TABU'''

    tabu_probability = random.randint(1, 100)
    if tabu_probability in (1, 40):
        pass
        #ban_min(x_opt)
    elif tabu_probability in (20, 30):
         pass
    elif tabu_probability in (40, 50):
        pass
    elif tabu_probability in (50, 100):
        pass

    '''Pamiec srednioterminowa i kryterium aspiracji'''
    if iterations_without_change >= 5000:
        medium_term_memory[count_cost(x_opt)] = x_opt

        iterations_without_change = 0
        x_opt = deepcopy(solution)  # dywersyfikacja je≈õli sie nie poprawi przez n iteracji to wez nowe (gorsze)rozwiazanie
                                    # obecnie- wroc do poczatku

    '''przedstawianie wyniku'''
    if solution_change:
        #ShowSolutions.show_routes(x_opt, bin_point_list)
        solution_change = False


[print(sol, medium_term_memory[sol]) for sol in medium_term_memory.keys()]
if medium_term_memory:
    min_road = min(medium_term_memory.keys())
    x_opt = deepcopy(medium_term_memory[min_road])

print("Wynik:")


print(medium_term_memory)
print(iterations_without_change)
print(x_opt, count_cost(x_opt))

ShowSolutions.show_routes(x_opt, bin_point_list)
'''
#srednoirweminowa sprawdz rozwiazania zanim zapiszesz do pamieci
#rozwiazania podobne nie zapisujemy na liscie
# zapisaƒá np 5 na roznych g√≥rkach

#d≈Çugotermiowa
#smieciarki kosze ile razy dany kosz by≈Ç w ≈õmieciarce
#gromadzenie wiedzy
#je≈õi nie poprawi to nie op≈Çaca siƒô korzystaƒá
#np mo≈ºana klika pomys≈Ç√≥w, potem sprawdziƒá kt√≥ry lepszy
'''
